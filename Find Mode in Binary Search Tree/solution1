/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 import java.util.Hashtable;
public class Solution {
    public int[] findMode(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<Integer>();
        inorderTraversal(root, list);
        int[] array = transform(list);
        return count(array);
        
        
    }
    
    public void inorderTraversal(TreeNode node, List<Integer> list){
        if(node == null)return;
        inorderTraversal(node.left, list);
        list.add(node.val);
        inorderTraversal(node.right, list);
    }
    
    public int[] transform(List<Integer> list){
        int[] array = new int[list.size()];
        for(int i=0; i< list.size(); i++){
            array[i] = list.get(i);
        }
        return array;
    }
    
    public int[] count(int[] array){
        Hashtable<Integer, Integer> hashtable = new Hashtable<>();
        for(int num : array){
            if(!hashtable.containsKey(num)){
                hashtable.put(num, 0);
            }
            hashtable.put(num,(hashtable.get(num))+1);
        }
        int max = 0;
        for(int key: hashtable.keySet()){
            if(hashtable.get(key)>max){
                max = hashtable.get(key);
            }
        }
        List<Integer> list = new ArrayList<>();
        for(int key: hashtable.keySet()){
            if(hashtable.get(key)==max){
                list.add(key);
            }
        }
        return transform(list);
        
    } 
}
