/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    LinkedList<Integer> list = new LinkedList<Integer>();
    public BSTIterator(TreeNode root) {
        inOrderTraversal(root,list);
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(list.size()!=0)return true;
        else return false;
    }

    /** @return the next smallest number */
    public int next() {
        return list.remove();
    }
    
    public void inOrderTraversal(TreeNode node, List<Integer> list){
        if(node == null) return;
        inOrderTraversal(node.left, list);
        list.add(node.val);
        inOrderTraversal(node.right, list);
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
