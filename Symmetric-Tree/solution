/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
		public static void main(String[] args){
			TreeNode root = new TreeNode(1);
			root.left = new TreeNode(3);
			System.out.println(levelTraversal(root));
		}

	    public static boolean isSymmetric(TreeNode root) {
	        ArrayList<ArrayList<Integer>> list = levelTraversal(root);
	        if(root == null)return true;
	        int size = list.size();
	        for(int i=1; i<size; i++){
	            ArrayList<Integer>subList = list.get(i);
	            if(!duichen(subList))return false;
	        }
	        return true;
	    }
	    

		public static boolean duichen(ArrayList<Integer> sublist){
	        int size = sublist.size();
	        for(int i=0; i<size/2; i++){
	            if(sublist.get(i) != sublist.get(size-i-1))return false;
	        }
	        return true;
	    }
	    
	    public static ArrayList<ArrayList<Integer>> levelTraversal(TreeNode root){
	 
	        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
	        if(root==null)return ans;
	        ArrayList<Integer> value =  new ArrayList<Integer>();
	        
	        LinkedList<TreeNode> current = new LinkedList<TreeNode>();
	        LinkedList<TreeNode> next = new LinkedList<TreeNode>();
	        
	        
	        
	        current.add(root);
	        
	        while(!current.isEmpty()){
	            
	            TreeNode node = current.poll();
	            
	            if(node==null){
	            	value.add(null);
	            	if(current.isEmpty()){
	 	                current = next;
	 	                next = new LinkedList<TreeNode>();
	 	            	ans.add(value);
	 	                value = new ArrayList<Integer>();
	 	            }
	            	continue;
	            }
	            
	            value.add(node.val);
	            System.out.println(value);

	            
	            if(node.left != null) next.add(node.left);
	            else next.add(node.left);
	            if(node.right!= null) next.add(node.right);
	            else next.add(node.right);
	            
	            
	            
	            if(current.isEmpty()){
	                current = next;
	                next = new LinkedList<TreeNode>();
	            	ans.add(value);
	                value = new ArrayList<Integer>();
	            }
                
	        }
	        return ans;
	        
	    }
}
